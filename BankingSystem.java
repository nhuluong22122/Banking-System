import java.io.FileInputStream;
import java.sql.*;
import java.util.Properties;
import java.util.Scanner;

/**
 * Manage connection to database and perform SQL statements.
 */
public class BankingSystem {
	// Connection properties
	private static String driver;
	private static String url;
	private static String username;
	private static String password;

	// JDBC Objects
	private static Connection con;
	private static Statement stmt;
	private static ResultSet rs;

	//Scanner
	private static Scanner scanner = new Scanner(System.in);

	//Current Info
	private static String customerID;

	/**
	 * Initialize database connection given properties file.
	 * @param filename name of properties file
	 */
	public static void init(String filename) {
		try {
			Properties props = new Properties();						// Create a new Properties object
			FileInputStream input = new FileInputStream(filename);	// Create a new FileInputStream object using our filename parameter
			props.load(input);										// Load the file contents into the Properties object
			driver = props.getProperty("jdbc.driver");				// Load the driver
			url = props.getProperty("jdbc.url");						// Load the url
			username = props.getProperty("jdbc.username");			// Load the username
			password = props.getProperty("jdbc.password");			// Load the password
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test database connection.
	 */
	public static void testConnection() {
		System.out.println(":: TEST - CONNECTING TO DATABASE");
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			con.close();
			System.out.println(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE");
			} catch (Exception e) {
				System.out.println(":: TEST - FAILED CONNECTED TO DATABASE");
				e.printStackTrace();
			}
	  }
	/**
	 * Create tables
	 */
	public static void createTables() {
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			String dropCustomer = "DROP TABLE P1.CUSTOMER";
			PreparedStatement dropStatement1 = con.prepareStatement(dropCustomer);
			dropStatement1.executeUpdate();
			dropStatement1.close();
			String dropAccount = "DROP TABLE P1.ACCOUNT";
			PreparedStatement dropStatement2 = con.prepareStatement(dropAccount);
			dropStatement2.executeUpdate();
			dropStatement2.close();
			String dropView = "DROP VIEW P1.TOTAL_BALANCE";
			PreparedStatement dropStatement3 = con.prepareStatement(dropView);
			dropStatement3.executeUpdate();
			dropStatement3.close();
			String createCustomer = "CREATE TABLE P1.CUSTOMER(ID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1), Name VARCHAR(15) NOT NULL, Gender CHAR(1) NOT NULL CHECK (Gender = 'M' OR Gender = 'F'), Age INT NOT NULL CHECK (Age >= 0), Pin INT NOT NULL CHECK(Pin >= 0) , PRIMARY KEY (ID))";
			PreparedStatement createStatement = con.prepareStatement(createCustomer);
			createStatement.executeUpdate();
			createStatement.close();
			String createAccount = "CREATE TABLE P1.ACCOUNT (Number INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000 INCREMENT BY 1), ID INT NOT NULL, Balance INT NOT NULL CHECK(Balance >= 0), Type CHAR(1) NOT NULL CHECK(Type = 'C' OR Type =  'S'), Status CHAR(1) NOT NULL CHECK(Status = 'A'OR Status = 'I'), PRIMARY KEY (Number), FOREIGN KEY (ID) REFERENCES P1.CUSTOMER (ID))";
			PreparedStatement createStatement2 = con.prepareStatement(createAccount);
			createStatement2.executeUpdate();
			createStatement2.close();
			String createView = "CREATE VIEW P1.TOTAL_BALANCE(ID, TOTAL) AS SELECT ID, SUM(BALANCE) FROM P1.ACCOUNT GROUP BY ID";
			PreparedStatement createViewStatement = con.prepareStatement(createView);
			createViewStatement.executeUpdate();
			createViewStatement.close();
			con.close();
			System.out.println(":: CREATED DATABASE SUCCESSFULLY");
		} catch (Exception e) {
			System.out.println("ERROR CREATING DATABASES");
			e.printStackTrace();
		}
	}

	/**
	 * Start the program
	 */
	public static void start(){
		mainMenu1();
	}

	private static void mainMenu1(){
		System.out.println("--------------------------------------------------\n" +
				":: Welcome to the Self Services Banking System! â€“ Main Menu");
		System.out.println("1.New Customer\n" +
				"2.Customer Login\n" +
				"3.Exit");
		if(scanner.hasNextLine()){
			String input = scanner.nextLine();
			if(input.length() > 1 || input.isEmpty()) {
				System.out.println("Please enter one digit to select the following options");
				mainMenu1();
			}
			else {
				switch (input) {
					case "1":
						newUser();
						mainMenu1();
						break;
					case "2":
						logIn();
						mainMenu1();
						break;
					case "3":
						scanner.close();
						System.exit(0);
						break;

				}
			}
		}
	}

	private static void customerMainMenu(){
		System.out.println("--------------------------------------------------\n" +
				"Customer Main Menu:\n1.Open Account\n" +
				"2.Close Account\n" +
				"3.Deposit\n" +
				"4.Withdraw\n" +
				"5.Transfer\n" +
				"6.Account Summary\n" +
				"7.Exit");
		if(scanner.hasNextLine()){
			String selection = scanner.nextLine();
			switch (selection){
				case "1":
					System.out.println("--------------------------------------------------\n"
					+ "OPEN NEW ACCOUNT");
					System.out.println("ID:");
					String id = scanner.nextLine();
					System.out.println("Account Type (C for Checking OR S for Saving)");
					String type = scanner.nextLine();
					System.out.println("Initial Deposit Amount");
					String deposit = scanner.nextLine();
					if(!id.isEmpty() && !type.isEmpty() && !deposit.isEmpty()) openAccount(id,type,deposit);
					else System.out.println("One of the inputs is missing");
					customerMainMenu();
					break;
				case "2":
					System.out.println("--------------------------------------------------\n"
							+ "CLOSE ACCOUNT");
					System.out.println("Account Number");
					String number = scanner.nextLine();
					if(!number.isEmpty()) closeAccount(number);
					else System.out.println("Your input is empty. Please try again.");
					customerMainMenu();
					break;
				case "3":
					System.out.println("--------------------------------------------------\n"
							+ "DEPOSIT MONEY");
					System.out.println("Account Number");
					number = scanner.nextLine();
					System.out.println("Deposit Amount");
					deposit = scanner.nextLine();
					if(!number.isEmpty() && !deposit.isEmpty()) deposit(number,deposit);
					else System.out.println("One of your inputs is empty. Please try again.");
					customerMainMenu();
					break;
				case "4":
					System.out.println("--------------------------------------------------\n"
							+ "WITHDRAW MONEY");
					System.out.println("Account Number");
					number = scanner.nextLine();
					System.out.println("Withdraw Amount");
					String withdraw = scanner.nextLine();
					if(!number.isEmpty() && !withdraw.isEmpty()) withdraw(number,withdraw);
					else System.out.println("One of your inputs is empty. Please try again.");
					customerMainMenu();
					break;
				case "5":
					System.out.println("--------------------------------------------------\n"
							+ "TRANSFER MONEY");
					System.out.println("Source Account Number");
					String source = scanner.nextLine();
					System.out.println("Destination Account Number");
					String destination = scanner.nextLine();
					System.out.println("Tranfer Amount");
					String amount = scanner.nextLine();
					if(!source.isEmpty() && !destination.isEmpty() && !amount.isEmpty()) transfer(source, destination, amount);
					else System.out.println("One of your inputs is empty");
					customerMainMenu();
					break;
				case "6":
					System.out.println("--------------------------------------------------\n"
							+ "ACCOUNT SUMMARY FOR CUSTOMER ID: " + customerID );
					accountSummary(customerID);
					customerMainMenu();
					break;
				case "7":
					mainMenu1();
					break;
				default:
					customerMainMenu();
					break;
			}
		}
	}
	private static void adminMainMenu(){
		System.out.println("--------------------------------------------------\n" +
				"Administrator Main Menu");
		System.out.println("1. Account Summary for a Customer\n" +
				"2. Report A :: Customer Information with Total Balance in Decreasing Order\n" +
				"3. Report B :: Find the Average Total Balance Between Age Groups\n" +
				"4. Exit");
		if(scanner.hasNextLine()){
			String input = scanner.nextLine();
			switch (input) {
				case "1":
					System.out.println("Please enter the customer ID");
					accountSummary(scanner.nextLine());
					adminMainMenu();
					break;
				case "2":
					reportA();
					adminMainMenu();
					break;
				case "3":
					System.out.println("Please enter the min and max age that you want to compute the average salary\nMin Age");
					String minAge = scanner.nextLine();
					System.out.println("Max Age");
					String maxAge = scanner.nextLine();
					if(!maxAge.isEmpty() && !minAge.isEmpty()) reportB(minAge,maxAge);
					else System.out.println(":: ERROR - One of your inputs is empty. Please try again");
					adminMainMenu();
					break;
				case "4":
					mainMenu1();
					break;
			}
		}
	}

	private static void newUser(){
		System.out.println("--------------------------------------------------\n" +
				"SIGN UP PAGE\n" +
				"Name (Letters Only)");
		String name = scanner.nextLine();
		System.out.println("Gender (F for Female | M for Male): ");
		String gender = scanner.nextLine();
		System.out.println("Age ");
		String age = scanner.nextLine();
		System.out.println("PIN ");
		String PIN = scanner.nextLine();
		if (!name.isEmpty() && !gender.isEmpty() && !age.isEmpty() && !PIN.isEmpty()) BankingSystem.newCustomer(name, gender.toUpperCase(), age, PIN);
		else {
			System.out.println(":: ERROR - One of the required inputs is empty. Please try again.");
			mainMenu1();
		}
	}

	private static void logIn(){
		System.out.println("--------------------------------------------------\n" +
				"LOG IN PAGE\n" +
				"Please enter your ID and PIN to sign in \nID (3 digits) ");
		String ID = scanner.nextLine();
		System.out.println("PIN");
		String PIN = scanner.nextLine();
		if(ID.trim().equals("0") && PIN.trim().equals("0")){
			customerID = "0";
			adminMainMenu();
		}
		else{
			boolean result = validateCustomer(ID, PIN);
			if(result){
				System.out.println(":: SUCCESS - Logged In Successfully");
				customerID = ID.toString();
				customerMainMenu();
			}
			else System.out.println(":: ERROR - Validation Failed. Please try again");
		}

	}


	/**
	 * Create a new customer.
	 * @param name customer name
	 * @param gender customer gender
	 * @param age customer age
	 * @param pin customer pin
	 */
	public static void newCustomer(String name, String gender, String age, String pin)
	{
		System.out.println("\n:: CREATE NEW CUSTOMER - RUNNING");
		try {
			con = DriverManager.getConnection(url, username, password);
			String queryNewCustomer = "SELECT ID FROM FINAL TABLE(INSERT INTO P1.CUSTOMER(NAME, GENDER, AGE, PIN) VALUES(?,?,?,?))";
			PreparedStatement prepare_stmt = con.prepareStatement(queryNewCustomer);
			prepare_stmt.setString(1, name);
			prepare_stmt.setString(2, gender);
			prepare_stmt.setInt(3, Integer.valueOf(age));
			prepare_stmt.setInt(4, Integer.valueOf(pin));
			prepare_stmt.executeQuery();
			rs = prepare_stmt.getResultSet();
			if(rs.next()) {
				System.out.println(":: CREATE NEW CUSTOMER - SUCCESS");
			}
			prepare_stmt.close();
			rs.close();
			con.close();
		} catch (SQLException e) {
			switch(e.getErrorCode()){
				case -545:
					System.out.println("One of your inputs does not satisfy the constraints of the database.Please re-enter your information with the following format:\n" +
							"Name (Letters Only)\n" +
							"Gender (F/M)\n" +
							"Age (>0)\n" +
							"PIN (>0)\n");
					mainMenu1();
					break;
			}
		} catch (NumberFormatException e){
			System.out.println(":: FORMAT ERROR - " + e.getMessage() + "Please make sure to enter LETTERS ONLY for Name and Gender and NUMBERS ONLY for Age and PIN");
		}
	}

	/**
	 * Check if the customer exists
	 * @param ID id of the customer
	 */
	public static boolean validateCustomer(String ID, String PIN)
	{
		try {
			Connection con = DriverManager.getConnection(url, username, password);
			Statement stmt = con.createStatement();
			String query = "SELECT PIN FROM P1.CUSTOMER WHERE ID = " + ID;
			rs = stmt.executeQuery(query);
			boolean empty = true;
			if (rs.next()) {
				int result = rs.getInt(1);
				empty = false;
				if(Integer.valueOf(PIN) == result) return true;
				else {
					System.out.println("UNMATCHED PIN");
					return false;
				}
			}
			if(empty) System.out.println(":: ERROR - No account is associated with: " + ID) ;
			rs.close();
			stmt.close();
			con.close();
		} catch (SQLException e) {
			System.out.println(":: ERROR");
			mainMenu1();
		}
		catch (NumberFormatException e) {
			System.out.println(":: FORMAT ERROR -  " + e.getMessage() + " .Please try again.");
		}
		return false;
	}



	/**
	 * Open a new account.
	 * @param id customer id
	 * @param type type of account
	 * @param amount initial deposit amount
	 */
	public static void openAccount(String id, String type, String amount)
	{
		System.out.println("\n:: OPEN ACCOUNT - RUNNING");
		try {
			con = DriverManager.getConnection(url, username, password);
			String queryOpenAccount = "SELECT NUMBER FROM FINAL TABLE(INSERT INTO P1.ACCOUNT(ID, BALANCE, TYPE, STATUS) VALUES(?,?,?,?))";
			PreparedStatement prepare_stmt = con.prepareStatement(queryOpenAccount);
			prepare_stmt.setInt(1, Integer.valueOf(id));
			prepare_stmt.setInt(2, Integer.valueOf(amount));
			prepare_stmt.setString(3, type);
			prepare_stmt.setString(4, "A");
			prepare_stmt.executeQuery();
			rs = prepare_stmt.getResultSet();
			if(rs.next()) {
				System.out.println(":: OPEN ACCOUNT - SUCCESS");
			}
			prepare_stmt.close();
		} catch (SQLException e) {
			switch (e.getErrorCode()) {
				case -530:
					System.out.println(":: ERROR - ID: " + id + " does not existed in the customer table");
					break;
				case -545:
					System.out.println(":: ERROR - One of your inputs does not satisfy the constraints of the database.");
					break;

			}
		}
		catch (NumberFormatException e) {
			System.out.println(":: FORMAT ERROR - " + e.getMessage() + " .Please try again.");
		}
	}

	/**
	 * Close an account.
	 * @param accNum account number
	 */
	public static void closeAccount(String accNum)
	{
		System.out.println("\n:: CLOSE ACCOUNT - RUNNING");
		if(isActive(accNum)){
			try {
				con = DriverManager.getConnection(url, username, password);
				String queryCloseAccount = "SELECT NUMBER FROM FINAL TABLE(UPDATE P1.ACCOUNT SET STATUS = 'I' WHERE NUMBER = ?)";
				PreparedStatement prepare_stmt = con.prepareStatement(queryCloseAccount);
				prepare_stmt.setInt(1, Integer.valueOf(accNum));
				rs = prepare_stmt.executeQuery();
				while(rs.next()){
					int number = rs.getInt(1);
					if(number == Integer.valueOf(accNum)) System.out.println(":: CLOSE ACCOUNT - SUCCESS");

				}
				rs.close();
				prepare_stmt.close();
				con.close();
			} catch (SQLException e) {
				System.out.println();

			} catch (NumberFormatException e){
				System.out.println(":: FORMAT ERROR - " + e.getMessage() + " .Please make sure ID and Deposit are numbers and enter C or S for account type.");
			}
		}

	}

	/**
	 * Deposit into an account.
	 * @param accNum account number
	 * @param amount deposit amount
	 */
	public static void deposit(String accNum, String amount)
	{
		System.out.println("\n:: DEPOSIT - RUNNING");
		//Need to check if account is active
		if(isActive(accNum)) {
			try {
				con = DriverManager.getConnection(url, username, password);
				String queryDeposit = "UPDATE P1.ACCOUNT SET BALANCE = BALANCE + ? WHERE NUMBER = ?";
				PreparedStatement prepare_stmt = con.prepareStatement(queryDeposit);
				prepare_stmt.setInt(1, Integer.valueOf(amount));
				prepare_stmt.setInt(2, Integer.valueOf(accNum));
				prepare_stmt.executeUpdate();
				prepare_stmt.close();
				con.close();
				System.out.println(":: DEPOSIT - SUCCESS");
			} catch (SQLException e) {
				System.out.println();
				e.printStackTrace();
			}
		}

	}

	/**
	 * Withdraw from an account.
	 * @param accNum account number
	 * @param amount withdraw amount
	 */
	public static void withdraw(String accNum, String amount)
	{
		System.out.println("\n:: WITHDRAW - RUNNING");
		if(isActive(accNum)) {
			try {
				con = DriverManager.getConnection(url, username, password);
				String queryWithdraw = "UPDATE P1.ACCOUNT SET BALANCE = BALANCE - ? WHERE NUMBER = ?";
				PreparedStatement prepare_stmt = con.prepareStatement(queryWithdraw);
				prepare_stmt.setInt(1, Integer.valueOf(amount));
				prepare_stmt.setInt(2, Integer.valueOf(accNum));
				prepare_stmt.executeUpdate();
				prepare_stmt.close();
				con.close();
				System.out.println(":: WITHDRAW - SUCCESS");
			} catch (SQLException e) {
				System.out.println(":: WITHDRAW - ERROR. Please try again");
			} catch (NumberFormatException e){
				System.out.println(":: WITHDRAW - ERROR. Please make sure to enter NUMBERS for Account Number and Withdraw Amount");
			}
		}
	}

	/**
	 * Transfer amount from source account to destination account.
	 * @param srcAccNum source account number
	 * @param destAccNum destination account number
	 * @param amount transfer amount
	 */
	public static void transfer(String srcAccNum, String destAccNum, String amount)
	{
		System.out.println("\n:: TRANSFER - RUNNING");
		if(isActive(srcAccNum) && isActive(destAccNum)) {
			//Withdraw then deposit
			try {
				con = DriverManager.getConnection(url, username, password);
				String queryWithdraw = "";
				PreparedStatement prepare_stmt = con.prepareStatement(queryWithdraw);
				prepare_stmt.setInt(1, Integer.valueOf(amount));
				prepare_stmt.setInt(2, Integer.valueOf(srcAccNum));
				prepare_stmt.executeUpdate();
				prepare_stmt.close();

				String queryDeposit = "UPDATE P1.ACCOUNT SET BALANCE = BALANCE + ? WHERE NUMBER = ?";
				prepare_stmt = con.prepareStatement(queryDeposit);
				prepare_stmt.setInt(1, Integer.valueOf(amount));
				prepare_stmt.setInt(2, Integer.valueOf(destAccNum));
				prepare_stmt.executeUpdate();
				prepare_stmt.close();
				con.close();
			} catch (SQLException e) {
				System.out.println(":: TRANSFER - ERROR: An error happened with withdrawing from the source and deposit to the destination");
			}

			System.out.println(":: TRANSFER - SUCCESS");
		}
	}

	/**
	 * Display account summary.
	 * @param cusID customerID
	 */
	public static void accountSummary(String cusID)
	{
		StringBuilder sb=new StringBuilder();
		System.out.println("\n:: ACCOUNT SUMMARY - RUNNING");
		try {
			Connection con = DriverManager.getConnection(url, username, password);
			Statement stmt = con.createStatement();
			String query = "SELECT NUMBER, BALANCE FROM P1.ACCOUNT WHERE ID = " + cusID;
			ResultSet rs = stmt.executeQuery(query);
			sb.append(String.format(" %-10s","NUMBER"));
			sb.append(String.format(" %-10s\n","BALANCE"));
			sb.append(String.format(" %-10s","----------"));
			sb.append(String.format(" %-10s\n","----------"));
			boolean empty = true;
			int total = 0;
			while (rs.next()) {
				int number = rs.getInt(1);
				sb.append(String.format(" %10s",number));
				int balance = rs.getInt(2);
				sb.append(String.format(" %10s\n",balance));
				total += balance;
				empty = false;
			}
			System.out.println(sb.toString());
			sb.append(String.format(" %-20s","----------"));
			sb.append(String.format(" %-10s%-10s\n","TOTAL",total));
			if(empty) System.out.println("No account is associated with this customerID: " + cusID);
			else System.out.println(":: ACCOUNT SUMMARY - SUCCESS");
			rs.close();
			stmt.close();
			con.close();
		} catch (SQLException e) {
			System.out.println(":: ACCOUNT SUMMARY - ERROR");
		}

	}

	/**
	 * Display Report A - Customer Information with Total Balance in Decreasing Order.
	 */
	public static void reportA()
	{
		System.out.println("\n:: REPORT A - RUNNING");
		StringBuilder sb=new StringBuilder();
		try {
			Connection con = DriverManager.getConnection(url, username, password);
			Statement stmt = con.createStatement();
			String query = "SELECT B.ID, NAME, GENDER, AGE, TOTAL FROM P1.CUSTOMER C, P1.TOTAL_BALANCE B WHERE C.ID = B.ID ORDER BY TOTAL DESC";
			ResultSet rs = stmt.executeQuery(query);
			sb.append(String.format(" %-10s","ID"));
			sb.append(String.format(" %-10s","NAME"));
			sb.append(String.format(" %-10s","GENDER"));
			sb.append(String.format(" %-10s","AGE"));
			sb.append(String.format(" %-10s\n","TOTAL"));
			sb.append(String.format(" %-10s","----------"));
			sb.append(String.format(" %-10s","----------"));
			sb.append(String.format(" %-10s","----------"));
			sb.append(String.format(" %-10s","----------"));
			sb.append(String.format(" %-10s\n","----------"));
			while (rs.next()) {
				int id = rs.getInt(1);
				sb.append(String.format(" %10s",id));
				String name = rs.getString(2);
				sb.append(String.format(" %-10s",name));
				String gender = rs.getString(3);
				sb.append(String.format(" %10s",gender));
				int age = rs.getInt(4);
				sb.append(String.format(" %10s",age));
				int total = rs.getInt(5);
				sb.append(String.format(" %10s\n",total));
			}
			System.out.println(sb.toString());
			rs.close();
			stmt.close();
			con.close();
			System.out.println(":: REPORT A - SUCCESS");
		} catch (SQLException e) {
			System.out.println(":: REPORT A - ERROR READING THE DATABASE");
		}
	}

	/**
	 * Display Report B - Customer Information with Total Balance in Decreasing Order.
	 * @param min minimum age
	 * @param max maximum age
	 */
	public static void reportB(String min, String max)
	{
		System.out.println("\n:: REPORT B - RUNNING");
		StringBuilder sb=new StringBuilder();
		try {
			Connection con = DriverManager.getConnection(url, username, password);
			Statement stmt = con.createStatement();
			String query = "SELECT AVG(TOTAL) AS AVERAGE FROM P1.TOTAL_BALANCE B, P1.CUSTOMER C WHERE C.ID = B.ID AND (C.AGE >= " + min + " AND C.AGE <= " + max + ") ";
			ResultSet rs = stmt.executeQuery(query);
			sb.append(String.format(" %-10s\n","AVERAGE"));
			sb.append(String.format(" %-10s\n","----------"));
			while (rs.next()) {
				int average = rs.getInt(1);
				sb.append(String.format(" %10s\n",average));
			}
			System.out.println(sb.toString());
			System.out.println(":: REPORT B - SUCCESS");
			rs.close();
			stmt.close();
			con.close();
		} catch (SQLException e) {
			System.out.println(":: REPORT B - ERROR");
			e.printStackTrace();
		} catch (NumberFormatException e) {
			System.out.println(":: FORMAT ERROR - " + e.getMessage() + " . Please make sure that maxAge and minAge are NUMBERS");
		}
	}

	/**
	 * Helper method that determines if the account is currently active
	 * @param accNum the account number
	 * @return true if the account is active false if its not active
	 */
	private static boolean isActive(String accNum) {
		try {
			con = DriverManager.getConnection(url, username, password);
			Statement stmt = con.createStatement();                                                 //Create a statement
			String query = "SELECT STATUS FROM P1.ACCOUNT WHERE NUMBER = " + accNum;
			ResultSet rs = stmt.executeQuery(query);                                                //Executing the query and storing the results in a Result Set
			boolean empty = true;
			while (rs.next()) {                                                                      //Loop through result set and retrieve contents of each row
				String status = rs.getString(1);
				empty = false;
				if (status.equals("A")) return true;
				else {
					System.out.println(":: ERROR - This account " + accNum + " is currently inactive");
				}
			}
			if(empty){
				System.out.println(":: ERROR - This account " + accNum + " does not exist in our system");
				return false;
			}
			rs.close();                                                                             //Close the result set after we are done with the result set
			stmt.close();
		}catch (SQLException e) {
			System.out.println(":: DATABASE ERROR");
		}catch (NumberFormatException e) {
			System.out.println(":: FORMAT ERROR - " + e.getMessage() + " .Make sure account number is a NUMBER");
		}
		return false;
	}
}
